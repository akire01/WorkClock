//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Evidencija_Radnih_Sati
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BazaPRA : DbContext
    {
        public BazaPRA()
            : base("name=BazaPRA")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Djelatnik> Djelatniks { get; set; }
        public virtual DbSet<Klijent> Klijents { get; set; }
        public virtual DbSet<LoginDjelatnik> LoginDjelatniks { get; set; }
        public virtual DbSet<Projekt> Projekts { get; set; }
        public virtual DbSet<Projekt_Djelatnik> Projekt_Djelatnik { get; set; }
        public virtual DbSet<Projekt_Klijent> Projekt_Klijent { get; set; }
        public virtual DbSet<Projekt_Tim> Projekt_Tim { get; set; }
        public virtual DbSet<SatiProjekt> SatiProjekts { get; set; }
        public virtual DbSet<Tim> Tims { get; set; }
        public virtual DbSet<TipDjelatnika> TipDjelatnikas { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int ActivityChange(string objekt, Nullable<int> id, Nullable<int> aktivnost)
        {
            var objektParameter = objekt != null ?
                new ObjectParameter("objekt", objekt) :
                new ObjectParameter("objekt", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var aktivnostParameter = aktivnost.HasValue ?
                new ObjectParameter("aktivnost", aktivnost) :
                new ObjectParameter("aktivnost", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActivityChange", objektParameter, idParameter, aktivnostParameter);
        }
    
        public virtual ObjectResult<GetDjelatnici_Result> GetDjelatnici()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDjelatnici_Result>("GetDjelatnici");
        }
    
        public virtual ObjectResult<GetDjelatnik_Result> GetDjelatnik(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDjelatnik_Result>("GetDjelatnik", idParameter);
        }
    
        public virtual ObjectResult<GetDjelatnikeNaProjektu_Result> GetDjelatnikeNaProjektu(Nullable<int> iDProjekt)
        {
            var iDProjektParameter = iDProjekt.HasValue ?
                new ObjectParameter("IDProjekt", iDProjekt) :
                new ObjectParameter("IDProjekt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDjelatnikeNaProjektu_Result>("GetDjelatnikeNaProjektu", iDProjektParameter);
        }
    
        public virtual ObjectResult<GetIzvjestajPoTimu_Result> GetIzvjestajPoTimu(Nullable<int> timID, Nullable<System.DateTime> datumPocetak, Nullable<System.DateTime> datumKraj)
        {
            var timIDParameter = timID.HasValue ?
                new ObjectParameter("timID", timID) :
                new ObjectParameter("timID", typeof(int));
    
            var datumPocetakParameter = datumPocetak.HasValue ?
                new ObjectParameter("DatumPocetak", datumPocetak) :
                new ObjectParameter("DatumPocetak", typeof(System.DateTime));
    
            var datumKrajParameter = datumKraj.HasValue ?
                new ObjectParameter("DatumKraj", datumKraj) :
                new ObjectParameter("DatumKraj", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIzvjestajPoTimu_Result>("GetIzvjestajPoTimu", timIDParameter, datumPocetakParameter, datumKrajParameter);
        }
    
        public virtual ObjectResult<GetIzvjestajZaKlijenta_Result> GetIzvjestajZaKlijenta(Nullable<int> klijentID, Nullable<System.DateTime> datumPocetak, Nullable<System.DateTime> datumKraj)
        {
            var klijentIDParameter = klijentID.HasValue ?
                new ObjectParameter("KlijentID", klijentID) :
                new ObjectParameter("KlijentID", typeof(int));
    
            var datumPocetakParameter = datumPocetak.HasValue ?
                new ObjectParameter("DatumPocetak", datumPocetak) :
                new ObjectParameter("DatumPocetak", typeof(System.DateTime));
    
            var datumKrajParameter = datumKraj.HasValue ?
                new ObjectParameter("DatumKraj", datumKraj) :
                new ObjectParameter("DatumKraj", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIzvjestajZaKlijenta_Result>("GetIzvjestajZaKlijenta", klijentIDParameter, datumPocetakParameter, datumKrajParameter);
        }
    
        public virtual ObjectResult<GetKlijent_Result> GetKlijent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetKlijent_Result>("GetKlijent", idParameter);
        }
    
        public virtual ObjectResult<GetKlijenti_Result> GetKlijenti()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetKlijenti_Result>("GetKlijenti");
        }
    
        public virtual ObjectResult<Nullable<int>> GetProjectId(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetProjectId", nazivParameter);
        }
    
        public virtual ObjectResult<GetProjekt_Result> GetProjekt(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjekt_Result>("GetProjekt", idParameter);
        }
    
        public virtual ObjectResult<string> GetProjekteDjelatnika(Nullable<int> iDDjelatnika)
        {
            var iDDjelatnikaParameter = iDDjelatnika.HasValue ?
                new ObjectParameter("IDDjelatnika", iDDjelatnika) :
                new ObjectParameter("IDDjelatnika", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetProjekteDjelatnika", iDDjelatnikaParameter);
        }
    
        public virtual ObjectResult<GetTeams_Result> GetTeams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeams_Result>("GetTeams");
        }
    
        public virtual ObjectResult<GetTim_Result> GetTim(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTim_Result>("GetTim", idParameter);
        }
    
        public virtual ObjectResult<GetTimoveNaProjektu_Result> GetTimoveNaProjektu(Nullable<int> iDProjekt)
        {
            var iDProjektParameter = iDProjekt.HasValue ?
                new ObjectParameter("IDProjekt", iDProjekt) :
                new ObjectParameter("IDProjekt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimoveNaProjektu_Result>("GetTimoveNaProjektu", iDProjektParameter);
        }
    
        public virtual ObjectResult<GetTimovi_Result> GetTimovi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimovi_Result>("GetTimovi");
        }
    
        public virtual ObjectResult<GetTypes_Result> GetTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTypes_Result>("GetTypes");
        }
    
        public virtual ObjectResult<GetVoditelji_Result> GetVoditelji()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVoditelji_Result>("GetVoditelji");
        }
    
        public virtual int InsertDjelatnikNaProjekt(Nullable<int> idDjelatnik, Nullable<int> idProjekt)
        {
            var idDjelatnikParameter = idDjelatnik.HasValue ?
                new ObjectParameter("idDjelatnik", idDjelatnik) :
                new ObjectParameter("idDjelatnik", typeof(int));
    
            var idProjektParameter = idProjekt.HasValue ?
                new ObjectParameter("idProjekt", idProjekt) :
                new ObjectParameter("idProjekt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDjelatnikNaProjekt", idDjelatnikParameter, idProjektParameter);
        }
    
        public virtual int InsertEmployee(string ime, string prezime, string email, Nullable<System.DateTime> datumZaposlenja, Nullable<int> tip, Nullable<int> tim)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("prezime", prezime) :
                new ObjectParameter("prezime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var datumZaposlenjaParameter = datumZaposlenja.HasValue ?
                new ObjectParameter("datumZaposlenja", datumZaposlenja) :
                new ObjectParameter("datumZaposlenja", typeof(System.DateTime));
    
            var tipParameter = tip.HasValue ?
                new ObjectParameter("tip", tip) :
                new ObjectParameter("tip", typeof(int));
    
            var timParameter = tim.HasValue ?
                new ObjectParameter("tim", tim) :
                new ObjectParameter("tim", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployee", imeParameter, prezimeParameter, emailParameter, datumZaposlenjaParameter, tipParameter, timParameter);
        }
    
        public virtual int InsertKlijent(string ime, string email)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertKlijent", imeParameter, emailParameter);
        }
    
        public virtual int InsertProject(string naziv, Nullable<System.DateTime> datumOtvaranja, Nullable<int> idVoditelj, Nullable<int> idKlijent)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var datumOtvaranjaParameter = datumOtvaranja.HasValue ?
                new ObjectParameter("datumOtvaranja", datumOtvaranja) :
                new ObjectParameter("datumOtvaranja", typeof(System.DateTime));
    
            var idVoditeljParameter = idVoditelj.HasValue ?
                new ObjectParameter("idVoditelj", idVoditelj) :
                new ObjectParameter("idVoditelj", typeof(int));
    
            var idKlijentParameter = idKlijent.HasValue ?
                new ObjectParameter("idKlijent", idKlijent) :
                new ObjectParameter("idKlijent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProject", nazivParameter, datumOtvaranjaParameter, idVoditeljParameter, idKlijentParameter);
        }
    
        public virtual int InsertTeam(string naziv, Nullable<int> voditeljID, Nullable<System.DateTime> datumKreiranja)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var voditeljIDParameter = voditeljID.HasValue ?
                new ObjectParameter("VoditeljID", voditeljID) :
                new ObjectParameter("VoditeljID", typeof(int));
    
            var datumKreiranjaParameter = datumKreiranja.HasValue ?
                new ObjectParameter("DatumKreiranja", datumKreiranja) :
                new ObjectParameter("DatumKreiranja", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTeam", nazivParameter, voditeljIDParameter, datumKreiranjaParameter);
        }
    
        public virtual int InsertTimNaProjekt(Nullable<int> idTim, Nullable<int> idProjekt)
        {
            var idTimParameter = idTim.HasValue ?
                new ObjectParameter("idTim", idTim) :
                new ObjectParameter("idTim", typeof(int));
    
            var idProjektParameter = idProjekt.HasValue ?
                new ObjectParameter("idProjekt", idProjekt) :
                new ObjectParameter("idProjekt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTimNaProjekt", idTimParameter, idProjektParameter);
        }
    
        public virtual int IzbaciDjelatnikaSProjekta(Nullable<int> projektID, Nullable<int> djelatnikID)
        {
            var projektIDParameter = projektID.HasValue ?
                new ObjectParameter("projektID", projektID) :
                new ObjectParameter("projektID", typeof(int));
    
            var djelatnikIDParameter = djelatnikID.HasValue ?
                new ObjectParameter("djelatnikID", djelatnikID) :
                new ObjectParameter("djelatnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IzbaciDjelatnikaSProjekta", projektIDParameter, djelatnikIDParameter);
        }
    
        public virtual int IzbaciTimSProjekta(Nullable<int> projektID, Nullable<int> timID)
        {
            var projektIDParameter = projektID.HasValue ?
                new ObjectParameter("projektID", projektID) :
                new ObjectParameter("projektID", typeof(int));
    
            var timIDParameter = timID.HasValue ?
                new ObjectParameter("timID", timID) :
                new ObjectParameter("timID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IzbaciTimSProjekta", projektIDParameter, timIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LoginUser(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LoginUser", usernameParameter, passwordParameter);
        }
    
        public virtual int UpdateDjelatnik(Nullable<int> iDDjelatnik, Nullable<int> tipID, string ime, string prezime, string email, Nullable<System.DateTime> datumZaposlenja, Nullable<int> timID)
        {
            var iDDjelatnikParameter = iDDjelatnik.HasValue ?
                new ObjectParameter("IDDjelatnik", iDDjelatnik) :
                new ObjectParameter("IDDjelatnik", typeof(int));
    
            var tipIDParameter = tipID.HasValue ?
                new ObjectParameter("TipID", tipID) :
                new ObjectParameter("TipID", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var datumZaposlenjaParameter = datumZaposlenja.HasValue ?
                new ObjectParameter("DatumZaposlenja", datumZaposlenja) :
                new ObjectParameter("DatumZaposlenja", typeof(System.DateTime));
    
            var timIDParameter = timID.HasValue ?
                new ObjectParameter("TimID", timID) :
                new ObjectParameter("TimID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDjelatnik", iDDjelatnikParameter, tipIDParameter, imeParameter, prezimeParameter, emailParameter, datumZaposlenjaParameter, timIDParameter);
        }
    
        public virtual int UpdateKlijent(Nullable<int> id, string ime, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateKlijent", idParameter, imeParameter, emailParameter);
        }
    
        public virtual int UpdateProject(Nullable<int> id, string naziv, Nullable<System.DateTime> datumOtvaranja, Nullable<int> idVoditelj, Nullable<int> idKlijent)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var datumOtvaranjaParameter = datumOtvaranja.HasValue ?
                new ObjectParameter("datumOtvaranja", datumOtvaranja) :
                new ObjectParameter("datumOtvaranja", typeof(System.DateTime));
    
            var idVoditeljParameter = idVoditelj.HasValue ?
                new ObjectParameter("idVoditelj", idVoditelj) :
                new ObjectParameter("idVoditelj", typeof(int));
    
            var idKlijentParameter = idKlijent.HasValue ?
                new ObjectParameter("idKlijent", idKlijent) :
                new ObjectParameter("idKlijent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProject", idParameter, nazivParameter, datumOtvaranjaParameter, idVoditeljParameter, idKlijentParameter);
        }
    
        public virtual int UpdateTim(Nullable<int> id, string naziv, Nullable<int> voditeljID, Nullable<System.DateTime> datumKreiranja)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var voditeljIDParameter = voditeljID.HasValue ?
                new ObjectParameter("voditeljID", voditeljID) :
                new ObjectParameter("voditeljID", typeof(int));
    
            var datumKreiranjaParameter = datumKreiranja.HasValue ?
                new ObjectParameter("DatumKreiranja", datumKreiranja) :
                new ObjectParameter("DatumKreiranja", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTim", idParameter, nazivParameter, voditeljIDParameter, datumKreiranjaParameter);
        }
    }
}
